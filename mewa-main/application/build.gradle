import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext {
    backendProjectName= 'application'
    jarVersion = project.properties['jarVersion'] ?: project.version
    backendJar = "$backendProjectName-${jarVersion}.jar"
    if (!project.hasProperty('imageTag')) {
        imageTag = version
    }
    dockerImageName = "mewa"
}

dependencies {
    compile fileTree(dir: '../lib', include: '*.jar')
    compile project(':mewa-main:business-api')
    compile project(':mewa-main:business-impl')
    compile project(':mewa-main:rest-controller')
    compile project(':mewa-main:model')
    compile project(':mewa-main:util')
    compile project(':mewa-main:security')

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-logging")

    implementation("com.pru.ap.translations:ap-translations-library:${pruTranslationsLibVersion}")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.ehcache:ehcache:${ehCacheVersion}")
    implementation("javax.cache:cache-api:${cacheApiVersion}")
    implementation("javax.xml.bind:jaxb-api:${versionJaxb}")
    implementation("org.glassfish.jaxb:jaxb-runtime:${versionJaxb}")

    implementation("net.logstash.logback:logstash-logback-encoder:${logstashEncoderVersion}")
    implementation("org.codehaus.janino:janino:${janinoVersion}")
    implementation("org.hibernate.validator:hibernate-validator:$hibernateValidatorVersion")
    implementation("io.springfox:springfox-swagger2:${rootProject.ext.springfoxSwagger}")
    implementation("io.springfox:springfox-swagger-ui:${rootProject.ext.springfoxSwagger}")

    runtime("org.springframework.boot:spring-boot-devtools:$springBootVersion")

    implementation("ma.glasnost.orika:orika-core:$orikaVersion")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    testImplementation("com.h2database:h2:${h2Version}")
    testImplementation("org.codehaus.janino:janino:${janinoVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    testImplementation("org.codehaus.groovy:groovy-all:${rootProject.ext.groovyAllVersion}")
    testImplementation("org.spockframework:spock-core:${rootProject.ext.spockVersion}")
    testImplementation("org.spockframework:spock-spring:${rootProject.ext.spockVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testImplementation("org.springframework.security:spring-security-test:${springSecurityVersion}")
}

testClasses.dependsOn compileGroovy

apply from: "${gradlePluginDir}/docker.gradle"

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/application*.yaml'
        include '**/application*.properties'
        project.properties.findAll {
            it.value != null
        }.each {
            filter(ReplaceTokens, tokens: [(it.key): it.value])
            filter(ReplaceTokens, tokens: [("project.${it.key}".toString()): it.value])
        }
    }
}

bootRun {
    if (project.hasProperty('mode')) {
        systemProperty "spring.profiles.active", mode
    }
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8653"]
    def localProps = new Properties()
    file("local.properties").withInputStream { localProps.load(it) }
    systemProperties localProps
}
