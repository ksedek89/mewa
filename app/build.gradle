import org.apache.tools.ant.filters.ReplaceTokens


plugins {
    id 'com.pru.prudocker' version '1.0.2'
}

pruDocker {
    dockerImageName = "mewa-be"
}


apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


ext {
    backendProjectName= 'application'
    jarVersion = project.properties['jarVersion'] ?: project.version
    backendJar = "$backendProjectName-${jarVersion}.jar"
    if (!project.hasProperty('imageTag')) {
        imageTag = version
    }
}


dependencies {
    implementation fileTree(dir: '../lib', include: ['*.jar'])

    implementation project(':utils')
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.5'
    implementation "jakarta.persistence:jakarta.persistence-api"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation("org.springframework.boot:spring-boot-starter-cache")

    implementation("net.logstash.logback:logstash-logback-encoder:5.2")
    implementation("org.codehaus.janino:janino:3.0.11")
    implementation("org.hibernate.validator:hibernate-validator:6.0.10.Final")
    implementation("io.springfox:springfox-swagger2:2.9.2")
    implementation("io.springfox:springfox-swagger-ui:2.9.2")


    implementation("org.springframework.boot:spring-boot-starter-actuator")


    testImplementation("org.springframework.boot:spring-boot-starter-test:2.1.4.RELEASE")



    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.2'

    implementation 'org.springframework.integration:spring-integration-ip:5.5.10'
}

testClasses.dependsOn compileGroovy

apply plugin: 'application'

mainClassName = 'com.mewa.Application'

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/logback-spring.xml'
        duplicatesStrategy DuplicatesStrategy.INCLUDE
        filter(ReplaceTokens, tokens:[
                'dockerImageName': project.plugins.getPlugin('com.pru.prudocker').dockerImageName,
                'version': project.version
        ])
    }
}

bootRun {
    enabled true
    if (project.hasProperty('mode')) {
        systemProperty "spring.profiles.active", mode
    }
//    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8653"]
    def localProps = new Properties()
    file("local.properties").withInputStream { localProps.load(it) }
    systemProperties localProps
}


bootJar {
    enabled = true
}
